import queue
import random
from collections import deque

# –ó–ê–í–î–ê–ù–ù–Ø 1: –Ü–º—ñ—Ç—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–æ–∫ —É —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —á–µ—Ä–≥—É (–∫–ª–∞—Å Queue).

# 1. –°–¢–í–û–†–Æ–Ñ–ú–û –ß–ï–†–ì–£ –ó–ê–Ø–í–û–ö
request_queue = queue.Queue()

# 2. –§–£–ù–ö–¶–Ü–Ø: –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ù–û–í–ò–• –ó–ê–Ø–í–û–ö
def generate_request():
    """
    –§—É–Ω–∫—Ü—ñ—è –∑—ñ–º—ñ—Ç—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞—è–≤–∫–∏ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —ñ –¥–æ–¥–∞—î —ó—ó –¥–æ —á–µ—Ä–≥–∏.
    """
    request_id = random.randint(1000, 9999)  # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∑–∞—è–≤–∫–∏
    request_queue.put(request_id)  # –î–æ–¥–∞—î–º–æ –∑–∞—è–≤–∫—É –¥–æ —á–µ—Ä–≥–∏
    print(f"–ó–∞—è–≤–∫–∞ {request_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –¥–æ —á–µ—Ä–≥–∏.")

# 3. –§–£–ù–ö–¶–Ü–Ø: –û–ë–†–û–ë–ö–ê –ó–ê–Ø–í–û–ö
def process_request():
    """
    –§—É–Ω–∫—Ü—ñ—è –∑–¥—ñ–π—Å–Ω—é—î –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–∫–∏ –∑ —á–µ—Ä–≥–∏.
    –ó–Ω—ñ–º–∞—î –∑–∞—è–≤–∫—É –∑ —á–µ—Ä–≥–∏ —Ç–∞ —ñ–º—ñ—Ç—É—î —ó—ó –æ–±—Ä–æ–±–∫—É.
    """
    if not request_queue.empty():
        request_id = request_queue.get()  # –ó–Ω–∏–º–∞—î–º–æ –∑–∞—è–≤–∫—É –∑ —á–µ—Ä–≥–∏
        print(f" –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –∑–∞—è–≤–∫–∞ {request_id}...")
        time.sleep(2)  # –Ü–º—ñ—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É
        print(f"‚úîÔ∏è –ó–∞—è–≤–∫—É {request_id} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ!")
    else:
        print(" –ß–µ—Ä–≥–∞ –ø—É—Å—Ç–∞. –ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")

# 4. # –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ –í–ò–ö–û–ù–ê–ù–ù–Ø
if __name__ == "__main__":
    while True:
        print("\n–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è:")
        print("1. –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–æ–∫")
        print("2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º")
        print("3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—ñ –¥—É–∂–æ–∫")
        print("4. –í–∏–π—Ç–∏")

        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ")

        if choice == "1":
            print("\n--- –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–æ–∫ ---")
            generate_request()
            process_request()
        elif choice == "2":
            print("\n--- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º ---")
            test_string = input("–í–≤–µ–¥—ñ—Ç—å —Ä—è–¥–æ–∫: ")
            if is_palindrome(test_string):
                print(f"‚úîÔ∏è –†—è–¥–æ–∫ '{test_string}' —î –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.")
            else:
                print(f"‚ùå –†—è–¥–æ–∫ '{test_string}' –Ω–µ —î –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.")
        elif choice == "3":
            print("\n--- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—ñ –¥—É–∂–æ–∫ ---")
            test_string = input("–í–≤–µ–¥—ñ—Ç—å —Ä—è–¥–æ–∫ —ñ–∑ –¥—É–∂–∫–∞–º–∏: ")
            if is_balanced_brackets(test_string):
                print(f"‚úîÔ∏è –†—è–¥–æ–∫ '{test_string}' —î —Å–∏–º–µ—Ç—Ä–∏—á–Ω–∏–º.")
            else:
                print(f"‚ùå –†—è–¥–æ–∫ '{test_string}' –Ω–µ —î —Å–∏–º–µ—Ç—Ä–∏—á–Ω–∏–º.")
        elif choice == "4":
            print("üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!")
            break
        else:
            print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
